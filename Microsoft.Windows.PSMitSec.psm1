<#
.DESCRIPTION
A successful attacker could bypass the BitLocker Device Encryption feature on the system storage device.
 An attacker with physical access to the target could exploit this vulnerability to gain access to encrypted data.
.LINK
https://support.microsoft.com/en-us/topic/november-8-2022-kb5019961-os-build-22000-1219-92b05506-99a5-449f-b3fa-c9bc96b19b67
.LINK
https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-41099
.LINK
https://github.com/halsey51013/UpdateWindowsRE-CVE-2022-41099
#>
function Test-PSMitSec_CVE202241099 {
    throw [System.NotImplementedException]::new("Test-PSMitSec_CVE202241099")
}
  
<#
  .DESCRIPTION
  Cannot be removed once applied (through this module). Tests applicability before invoking.
  Refer to Test-PSMitSec_CVE202241099.
  #>
function Invoke-PSMitSec_CVE202241099 {
    [CmdletBinding()]
    param (
        # If there's not enough space, re-create the partition
        [Parameter(Mandatory = $false)]
        [Switch]
        $AutoResizeWinREPartition,
        # How many bytes to add to the partition (borrowed from the OS drive)
        [Parameter(Mandatory = $false)]
        [UInt64]
        $AutoResizeWinREPartitionBy = 524288000 # 500 MB
    )
  
    Write-PSFMessage -Level Host -Message "Attempting to patch CVE-2022-41099"
  
    try {
        # Run some checks
        if (![Environment]::Is64BitOperatingSystem) {
            Write-PSFMessage -Level Error -Message "Patch cannot be applied to 32-bit systems."
            return $false
        }
    
        if ((Test-RebootPending)) {
            Write-PSFMessage -Level Error -Message "Patch cannot be applied while a reboot is pending."
            return $false
        }
  
        $WinOSBuild = [System.Environment]::OSVersion.Version.Build
        $PreRE = Get-WinREImageInfo
        Write-PSFMessage -Level Verbose -Message "RE Build Before: $($PreRE.SPBuild)"
        Write-PSFMessage -Level Verbose -Message "RE Last Modified Before: $($PreRE.ModifiedTime)"
  
        # Begin operation
        # Download the patch
        $CVE202241099SavePath = Get-PSMitSec_CVE202241099
        if (-not $CVE202241099SavePath) { return $false }
        # Check if the fix has already been applied (TO-DO)
  
        $WinREPath = Mount-WinRE
    
        $AddPackageOutput = ""
        # Add the patch, automatically retry for temporary errors (this could take 5 to 10 minutes, depending on the machine)
        if (-not (Add-DismPackage -Path $WinREPath -PackagePath $CVE202241099SavePath -Output ([ref]$AddPackageOutput))) {
            # Since this will probably fail once, outputs a ton of messy text. Find a way to clean up (TO-DO)
            if ($AddPackageOutput -Match "0x800f0823") {
                Write-PSFMessage -Level Verbose -Message "Waiting for a bit then Running DISM Add-Package again (0x800f0823)"
                Start-Sleep -Seconds 5
  
                if (-not (Add-DismPackage -Path $WinREPath -PackagePath $CVE202241099SavePath -Output ([ref]$AddPackageOutput))) { return $false }
            }
            else { return $false }
        }
  
        # Cleanup image
        Optimize-DismImage -Path $WinREPath -ErrorAction SilentlyContinue
  
        # Commit changes
        $DismountOutput = ""
        if (-not (Dismount-WinRE -Path $WinREPath -Output ([ref]$DismountOutput))) {
            # WinRE partition not big enough; resize if user allows it
            if ($DismountOutput -match "Operation failed: 70" -and $AutoResizeWinREPartition) {
                # Ensure we can have a WinRE partition
                $SysDisk = Get-Disk -Path ((Get-Partition | Where-Object { $_.Type -eq "System" }).DiskPath)
                $WinREPart = Get-Partition -DiskNumber $SysDisk.Number | Where-Object { $_.Type -eq "Recovery" }
                if ($WinREPart) {
                    # Increase the size and try again
                    if ((Resize-WinREPartition -NewSize ($WinREPart.Size + $AutoResizeWinREPartitionBy) -Confirm:$false)) { return $false }
                    if (-not (Dismount-WinRE -Path $WinREPath -Output ([ref]$DismountOutput))) { return $false }
                }
                else { Write-PSFMessage -Level Critical -Message "Unable to find the Windows Recovery partition."; return $false }
            }
            else { return $false }
        }
  
        # Output updated build and last modifed dates
        $PostRE = Get-WinREImageInfo
        Write-PSFMessage -Level Verbose -Message "RE Build After: $($PostRE.SPBuild)"
        Write-PSFMessage -Level Verbose -Message "RE Last Modifed After: $($PostRE.ModifiedTime)"
  
        if (($WinOSBuild -eq 22621) -and ($PostRE.SPBuild -eq 1105)) {
            Write-PSFMessage -Level Host -Message "Windows RE updated successfully to build $($PostRE.SPBuild)"
        }
        elseif (($WinOSBuild -eq 22000) -and ($PostRE.SPBuild -eq 1455)) {
            Write-PSFMessage -Level Host -Message "Windows RE updated successfully to build $($PostRE.SPBuild)"
        }
        elseif (($WinOSBuild -eq 19045) -and ($PostRE.SPBuild -eq 2486)) {
            Write-PSFMessage -Level Host -Message "Windows RE updated successfully to build $($PostRE.SPBuild)"
        }
        elseif (($WinOSBuild -eq 19044) -and ($PostRE.SPBuild -eq 2486)) {
            Write-PSFMessage -Level Host -Message "Windows RE updated successfully to build $($PostRE.SPBuild)"
        }
        elseif (($WinOSBuild -eq 19043) -and ($PostRE.SPBuild -eq 2364 )) {
            Write-PSFMessage -Level Host -Message "Windows RE updated successfully to build $($PostRE.SPBuild)"
        }
        elseif (($WinOSBuild -eq 19042) -and ($PostRE.SPBuild -eq 2486)) {
            Write-PSFMessage -Level Host -Message "Windows RE updated successfully to build $($PostRE.SPBuild)"
        }
        else {
            Write-PSFMessage -Level Critical -Message "Windows RE not updated: build number mismatch."
        }
    }
    catch [System.Net.WebException], [System.IO.IOException] {
        Write-PSFMessage -Level Critical -Message "Unable to download patch: $_"
    }
    catch {
        Write-PSFMessage -Level Critical -Message $_
    }
    finally {
        # Cleanup
        Write-PSFMessage -Level Verbose -Message "Cleaning up files and directories"
        # If we haven't dismounted it by now, we want to discard changes (something went wrong)
        $DismountOutput = ""
        $WinREPath = (Get-WinREMountPath)
        if ($WinREPath) {
            [void](Dismount-WinRE -Path $WinREPath -Output ([ref]$DismountOutput) -NoCommit)
        }
        if ($WinREPath -and (Test-Path -PathType Container -Path $WinREPath)) { Remove-Item -Path $WinREPath -Force }
        if ($CVE202241099SavePath -and (Test-Path -Path $CVE202241099SavePath)) { Remove-Item -Path $CVE202241099SavePath -Force }
    }
}
  
function Get-PSMitSec_CVE202241099 {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [Switch]
        $NoAuthenticodeValidation
    )
    begin {
        $CVE202241099SavePath = "$env:TEMP\CVE202241099.msu"
        $MsftUpdateCatlogUrl = "https://catalog.s.download.windowsupdate.com/d/msdownload/update/"
        $CVE202241099 = @{
            22621 = "software/secu/2023/01/windows11.0-kb5022303-x64_87d49704f3f7312cddfe27e45ba493048fdd1517.msu" # Windows 11 22H2
            22000 = "software/secu/2023/01/windows10.0-kb5022287-x64_55641f1989bae2c2d0f540504fb07400a0f187b3.msu" # Windows 11 21H2
            19045 = "software/secu/2023/01/windows10.0-kb5022282-x64_fdb2ea85e921869f0abe1750ac7cee34876a760c.msu" # Windows 10 22H2
            19044 = "software/secu/2023/01/windows10.0-kb5022282-x64_fdb2ea85e921869f0abe1750ac7cee34876a760c.msu" # Windows 10 21H2
            19043 = "software/secu/2022/12/windows10.0-kb5021233-x64_00bbf75a829a2cb4f37e4a2b876ea9503acfaf4d.msu" # Windows 10 21H1
            19042 = "software/secu/2023/01/windows10.0-kb5022282-x64_fdb2ea85e921869f0abe1750ac7cee34876a760c.msu" # Windows 10 20H2
        }
    
        $WinOSBuild = [System.Environment]::OSVersion.Version.Build
        if ($CVE202241099.ContainsKey($WinOSBuild)) {
            $MSUPatch = "$MsftUpdateCatlogUrl$($CVE202241099[$WinOSBuild])"
        }
        else {
            Write-PSFMessage -Level Critical -Message "Only Windows 11 (22H2 & 21H2) & Windows 10 (22H2, 21H2, 21H1, & 20H2) supported."
            Write-PSFMessage -Level Verbose -Message "Build number is $WinOSBuild"
        
            return $false
        }
    }
    process {
        # For those that still have not updated .Net Framework to use TLS1.2...
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        # Download patch
        $ProgressPreference = 'SilentlyContinue'
        Write-PSFMessage -Level Verbose -Message "Downloading Patch"
        $WebRequestResult = Invoke-WebRequest -Uri $MSUPatch -OutFile $CVE202241099SavePath -UseBasicParsing -PassThru
        if ($WebRequestResult.StatusCode -eq 200 ) { Write-PSFMessage -Level Verbose -Message "Downloaded patch successfully" }
        else { Write-PSFMessage -Level Critical -Message "Failed to download patch. Output: $REMountResult"; return $false }
  
        # https://www.reddit.com/r/sysadmin/comments/10a1enh/comment/j4qrhsg/?utm_source=share&utm_medium=web2x&context=3
        # Could be signed by LetsEncrypt?
        if ($NoAuthenticodeValidation) {
            return $CVE202241099SavePath
        }
        elseif ((Get-AuthenticodeSignature -FilePath $CVE202241099SavePath)) {
            Write-PSFMessage -Level Verbose -Message "Verified patch's digital signature"
            return $CVE202241099SavePath
        }
        else {
            Write-PSFMessage -Level Critical -Message "Failed to verify patch's digital signature"
            Remove-Item -Path $CVE202241099SavePath -Force
            return $null
        }
    }
}

Import-Module ".\Microsoft.Windows.PSGeneral.psm1"